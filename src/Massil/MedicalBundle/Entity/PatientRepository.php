<?php

namespace Massil\MedicalBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * PatientRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PatientRepository extends EntityRepository
{
	public function getPatientInformations($id,$page,$numberOfConsultation)
	{
		if ($page<1)
		{
			throw new \InvalidArgumentException('page_patient_Inexistantes');
		}
		$query=$this->createQueryBuilder('p')
					->where('p.id=:id')
					->setParameter('id', $id)
					->leftJoin('p.consultations', 'c')
					->addSelect('c')
					->orderBy('c.date','DESC')
					->getQuery();
					
		$query->setFirstResult(($page-1)*$numberOfConsultation);
		$query->setMaxResults($numberOfConsultation);
					
		return new Paginator($query);
	}
	
	public function getAllPatients($page,$filter,$direction)
	{	
		if ($page<1)
		{
			throw new \InvalidArgumentException('page_patient_Inexistantes');
		}
		if ($filter=='nom')
		{
			$filter='p.nom';
		}
		elseif ($filter=='prenom')
		{
			$filter='p.prenom';
		}
		elseif ($filter=='dateNaissance')
		{
			$filter='p.dateNaissance';
		}
		elseif ($filter=='sexe')
		{
			$filter='p.sexe';
		}
		elseif ($filter=='assurance')
		{
			$filter='p.assure';
		}
		elseif ($filter=='situation')
		{
			$filter='p.etatCivil';
		}
		else 
		{
			$filter='p.dateAjout';
		}
		
		if ($direction=='up')
		{
			$direction='ASC';
		}
		elseif ($direction=='down')
		{
			$direction='DESC';
		}
		
		$query=$this->createQueryBuilder('p')
					->orderBy($filter,$direction);
		
		$query->setFirstResult(($page-1)*20);
		$query->setMaxResults(20);
					
		return new Paginator($query);
	}
	
	public function getSearch($page, $recherche, $age=NULL, $date=NULL, $sexe=NULL, $assurance=NULL, $etatCivil=NULL)
	{
		$query=$this->createQueryBuilder('p');
		
		if ($recherche != null)
		{			
			$query->where('p.nom LIKE :search_nom')
			->setParameter(':search_nom', '%'.$recherche.'%')
			->orWhere('p.prenom LIKE :search_prenom')
			->setParameter(':search_prenom', '%'.$recherche.'%')
					
					;
		}
		
		if ($age != null)
		{
			/**
			 * now <> 2011- 1 -1 
			 * 31-12-2010- <> 1-1-1990
			 * 31-12-1989 <> 1-1-1969
			 * 31-12-1968 <> 1-1-1948
 			 * 31-12-1947 <> 1-1-1880 
			 */
			$now = $date->format('Y-m-d');
			$moinsDeTroisAns= new \DateTime();
			$moinsDeTroisAns->modify('-2 year');
			$moinsDeTroisAns->setDate($moinsDeTroisAns->format('Y'), '01', '01');
			
			$moinDeVingtAns= new \DateTime();
			$moinDeVingtAns->modify('-19 year')
							->setDate($moinDeVingtAns->format('Y'), '01', '01');
			
			$moinDeQuarantetAns= new \DateTime();
			$moinDeQuarantetAns->modify('-39 year')
							->setDate($moinDeQuarantetAns->format('Y'), '01', '01');
							
			$moinDeSoixantetAns= new \DateTime();
			$moinDeSoixantetAns->modify('-59 year')
							->setDate($moinDeSoixantetAns->format('Y'), '01', '01');

			if ($age == '>3')
			{
				$moinsDeTroisAns = $moinsDeTroisAns->format('Y-m-d');
				
				$query->andWhere('p.dateNaissance BETWEEN :small AND :great')
						->setParameter(':small', $moinsDeTroisAns)
						->setParameter(':great', $now)
						;
			}
			
			
			elseif ($age =='3<>20')
			{
				$moinDeVingtAns = $moinDeVingtAns->format('Y-m-d');
				
				$troisAns=$moinsDeTroisAns->modify('-1 day');
				$troisAns=$troisAns->format('Y-m-d');
				
				
				$query->andWhere('p.dateNaissance BETWEEN :small AND :great')
						->setParameter(':small', $moinDeVingtAns)
						->setParameter(':great', $troisAns)
						;
			}
			
			elseif ($age == '20<>40')
			{
				$moinDeQuarantetAns = $moinDeQuarantetAns->format('Y-m-d');
				
				$vingtAns = $moinDeVingtAns->modify('-1 day');
				$vingtAns = $vingtAns->format('Y-m-d');
				
				$query->andWhere('p.dateNaissance BETWEEN :small AND :great')
						->setParameter(':small', $moinDeQuarantetAns)
						->setParameter(':great', $vingtAns)
						;
			}
			
			elseif ($age == '40<>60')
			{
				$moinDeSoixantetAns = $moinDeSoixantetAns->format('Y-m-d');
				
				$QuaranteAns = $moinDeQuarantetAns->modify('-1 day');
				$QuaranteAns = $QuaranteAns->format('Y-m-d');
				
				$query->andWhere('p.dateNaissance BETWEEN :small AND :great')
						->setParameter(':small', $moinDeSoixantetAns)
						->setParameter(':great', $QuaranteAns)
						;
				
			}
			
			elseif ($age == '60<')
			{
				$soixanteAns = $moinDeSoixantetAns->modify('-1 day');
				$soixanteAns = $soixanteAns->format('Y-m-d');
				
				$query->andWhere('p.dateNaissance < :sexty_years')
						->setParameter(':sexty_years', $soixanteAns)
						;
						
			}	
		}
			
		if ($sexe != null)
		{
			$query->andWhere('p.sexe = :sexe')
					->setParameter(':sexe', $sexe)
					;
		}
		
		if ($assurance != null)
		{
			$query->andWhere('p.assure = :assurance')
					->setParameter(':assurance', $assurance)
				;
		}
		
		if ($etatCivil != null)
		{
			$query->andWhere('p.etatCivil = :etat_civil')
					->setParameter(':etat_civil', $etatCivil)
					;
		}

		
		$query->setFirstResult(($page-1)*20);
		$query->setMaxResults(20);
					
		return new Paginator($query);
	}
	
	public function getPatientsInSalleAttente($page,$date = NULL)
	{
		if ($page<1)
		{
			throw new \InvalidArgumentException('Inexistant');
		}
		
		if ($date == null)
		{
			$today = new \DateTime();
			$today = $today->format('Y-m-d');
		}
		else 
		{
			$today = date_create_from_format('d/m/Y',$date);
			$today = $today->format('Y-m-d');
		}
		
		$query=$this->createQueryBuilder('p')
					->leftJoin('p.patientSalleAttentes','ps')
					->addSelect('ps')
					->leftJoin('ps.salleAttente', 's')
					->addSelect('s')
					->where('s.date = :day')
					->setParameter(':day', $today)
					->orderBy('ps.dateArrive','ASC')
					;

		$query->setFirstResult(($page-1)*20);
		$query->setMaxResults(20);
					
		return new Paginator($query);
	}
	
	public function isPatientInSalle($patientId)
	{
		$today = new \DateTime();
		$today = $today->format('Y-m-d');
		
		$query=$this->createQueryBuilder('p')
					->leftJoin('p.patientSalleAttentes','ps')
					->addSelect('ps')
					->leftJoin('ps.salleAttente', 's')
					->addSelect('s')
					->where('s.date = :day')
					->setParameter(':day', $today)
					->andWhere('ps.patient = :patient_id')
					->setParameter(':patient_id', $patientId)
					;

		return $query->getQuery()
					->getResult();
	}
	
	public function getPS($id)
	{
		$today = new \DateTime();
		
		$today = $today->format('Y-m-d');
		
		$query=$this->createQueryBuilder('p')
					->where('p.id = :patient_id')
					->setParameter(':patient_id', $id)
					->leftJoin('p.patientSalleAttentes', 'ps')
					->addSelect('ps')
					->leftJoin('ps.salleAttente', 's')
					->addSelect('s')
					->andWhere('s.date = :today')
					->setParameter(':today', $today)
					;
					
		return $query->getQuery()
						->getResult();
	}
}
